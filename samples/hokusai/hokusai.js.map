{"version":3,"sources":["../samples/browser/hokusai/hokusai.fsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCK;AAhCL;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAgCK;AAAA;AAAA,iCAGe;AAAA;AAAA;AAAA,4BACC,WADD,EACQ,WADR;AACZ;AAAA;;AACJ,YAAI,WAAJ,EACM;AAAO;AACX,wBAAO,UAAK,IAAM,WAAX,CAAP;AADQ,SADV,MAGA;AAAA,cAAK,UAAL;AAAA;AAAA,iBAGM;AAAO;AACX,0BAAO,UAAK,IAAM,WAAX,CAAP;AADQ;AACsB;AATH;AAH5B;AAAA;AAAA,gDAcgB;AAAA;AAAA;AAAiB;AAAA;AAClC,sCAAQ,OAAR,EAAe,OAAf;AADgC;AAd/B;;AAAA;AAAA;;;;AAoBE;AAED,6BAAI;AAAA;AAAA;AACI,4BAAY,4BAAZ;AACC;AACA;AACA;AACX,oCAAQ,OAAO,cAAf,EAA0B,OAAO,cAAjC;AALmB,KAAjB;;AAFC;AAEE,GAFF;;AAiBH,sBAAI,yCAAJ;;AAGA,kCACF;AACE;AAAA;AAAA,wEACA;AAAA,sBAAa,qDAAb;AAAA,UADA;AAAA;AAAA;;AAEF,gBAAM,4BAAN;AAAoB,GAJlB;;AAWA,kDAIC;AAAA,gCADA,yBAAwB;AAAA;AAAA,KAAxB,EADA,oBAAU,OAAV,EADH,aACG,CACA,CACA;AAAU,GAJX;;AAgBC;AAAA;AAAA;;AACA,4DAAO;AAAA;AAAA;AAAA;AAA+B,iCACzC;AAAA,gCACM;AAAI;;AAEL;AAAA;AAAA,wBAAW,CAAC,OAAD,KAAX;AAAA;AAAA;;AAFC,gBAGH,WAHG,EAGQ,WAHR,EAGmB,WAHnB;AAAC,OADP,EAAS,wBAAK,SAAL,CAAT;AAAA,MADyC;AAAvB,GAAf;;AAUD,kCACF,WACG;AAAA,iCAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkC,KAAlC,EAAP,EACA;AAAA,mCAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkC,OAAlC,EAAP,EAEA;AAAA,qCAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8B,SAA9B,EAAP,EACA;AAAA,uCAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC,WAAjC,EAAP,EAEA;AAAA,yCAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmC,aAAnC,EAAP,EACA;AAAA,2CAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmC,eAAnC,EAAP,EACA,qBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkC,eAAzC,CADA;AAAA,cADA;AAAA,YAFA;AAAA,UADA;AAAA,QAFA;AAAA,MADA;AAAA,IADH,CADE;AAqBA;AACA;AAGA;AACA;;AAOA,oCACE;AAAQ,iBAAC,IAAI,IAAI,mBAAT;AAAR,aACM,SADN;AAAA,aAEM,SAFN;AAAA,aAGM,SAHN;AAAA,aAIM,SAJN;AAAK,GADP;;AAQC,wCACH;AAAA;AAAwB,GADrB;;AAQD,gCAAY;AAAA;AAAA,4BAEV;AAA2B;AACrB;AACA;AAIV,4BAAS,wBAAK,qBAAL,CAAT;AAAA;AACE,+CAAS,wBAAK,sBAAL,CAAT;AAAA;AACW,qBAAC,aAAmB,WAAnB,CAAD;AACA,qBAAC,cAAoB,WAApB,CAAD;AACA;AACT;AAAuB;AAAvB;AAAA;AAAA;AAAA;AAAmC;AAAnC;AAJ6B,WAA/B,kBAOA;AAAA,iCAAI,yBAAJ,EACA;AAAA;AAAA;AAA+B,aAD/B;AAAA,WAPA;AAD4B,SAA9B;AANQ,OAFM;AAAA;AAAK,GAAjB;;AAwBA,wBAAyB,0BAAzB;+BAC0B;AAC5B,KAAY;AAAA;AAAoB,KAAhC;;AAD4B;AAAC,G","file":"hokusai.js","sourcesContent":["(**\n - title: Hokusai and fractals\n - tagline: Rendering fractals using HTML5 canvas\n - app-style: padding:20px 0px 10px 0px;\n - intro: This demo is based on Tomas Petricek's [F# Advent Calendar post](http://tomasp.net/blog/2014/japan-advent-art-en/)\n   that explores Japanese art using the (now defunct) Freebase type provider and renders\n   The Great Wave by Hokusai using the Julia fractal.\n   You can find the [full source code on GitHub](https://github.com/fsprojects/Fable/blob/master/samples/browser/hokusai/hokusai.fsx).\n\n   In this demo, you'll see how to define a simple complex number arithmetic in F#,\n   how to use it to implement the Julia set fractal and how to render the fractal\n   asynchronously to avoid blocking the browser during the process.\n   To run the demo, click the \"Render Julia set fractal\" button!\n\n*)\n(*** hide ***)\n#r \"node_modules/fable-core/Fable.Core.dll\"\n\nopen Fable.Core\nopen Fable.Import.Browser\n\n(**\nComplex numbers\n---------------\n\nBefore looking at the fractal, we need a simple type for working with\ncomplex numbers that supports the `+` operation and the `abs` and `pow` functions.\nWe define the type as a simple wrapper over a pair of floating point numbers and\nadd `Abs` and `+` as static methods. This way, they can be used through the usual\nF# functions:\n*)\n\ntype Complex =\n  | Complex of float * float\n  /// Calculate the absolute value of a complex number\n  static member Abs(Complex(r, i)) =\n    let num1, num2 = abs r, abs i\n    if (num1 > num2) then\n      let num3 = num2 / num1\n      num1 * sqrt(1.0 + num3 * num3)\n    elif num2 = 0.0 then\n      num1\n    else\n      let num4 = num1 / num2\n      num2 * sqrt(1.0 + num4 * num4)\n  /// Add real and imaginary components pointwise\n  static member (+) (Complex(r1, i1), Complex(r2, i2)) =\n    Complex(r1+r2, i1+i2)\n(**\nBefore moving forward, we also need to calculate a power of complex numbers.\nTo do this, we define a `Pow` function in a helper module:\n*)\nmodule ComplexModule =\n  /// Calculates nth power of a complex number\n  let Pow(Complex(r, i), power) =\n    let num = Complex.Abs(Complex(r, i))\n    let num2 = atan2 i r\n    let num3 = power * num2\n    let num4 = num ** power\n    Complex(num4 * cos(num3), num4 * sin(num3))\n(**\nCalculating the Julia set\n-------------------------\n\nNow we have all we need to calculate the Julia set fractal. We choose\na carefuly chosen (handcrafted!) starting point. Then we create a sequence\nof powers using F# sequence expressions:\n*)\n/// Constant that generates nice fractal\nlet c = Complex(-0.70176, -0.3842)\n\n/// Generates sequence for given coordinates\nlet iterate x y =\n  let rec loop current = seq {\n    yield current\n    yield! loop (ComplexModule.Pow(current, 2.0) + c) }\n  loop (Complex(x, y))\n(**\nThe `iterate` lazilly function generates potentially infinite sequence of\nvalues. We take at most `max` iterations or stop when the absolute value of\nthe number is greater than 2. This can be nicely written using `Seq` functions\nfrom the standard F# library (supported by Fable):\n*)\nlet countIterations max x y =\n  iterate x y\n  |> Seq.take (max - 1)\n  |> Seq.takeWhile (fun v -> Complex.Abs(v) < 2.0)\n  |> Seq.length\n(**\nGenerating the color palette\n----------------------------\n\nTo generate a pretty picture, we need to carefuly generate the color palette.\nTo do this, we define a pair of operators that let us write\n`(rgb1) --n--> (rbg2)` and generate a range of colors between `rgb1` and `rgb2`\nconsisting of `n` steps.\n*)\n\n// Transition between colors in 'count' steps\nlet (--) clr count = clr, count\nlet (-->) ((r1,g1,b1), count) (r2,g2,b2) = [\n  for c in 0 .. count - 1 ->\n    let k = float c / float count\n    let mid v1 v2 =\n      (float v1 + ((float v2) - (float v1)) * k)\n    (mid r1 r2, mid g1 g2, mid b1 b2) ]\n(**\nNow we can generate palette that is based on Hokusai's famous painting:\n*)\n// Palette with colors used by Hokusai\nlet palette =\n  [| // 3x sky color & transition to light blue\n     yield! (245,219,184) --3--> (245,219,184)\n     yield! (245,219,184) --4--> (138,173,179)\n     // to dark blue and then medium dark blue\n     yield! (138,173,179) --4--> (2,12,74)\n     yield! (2,12,74)     --4--> (61,102,130)\n     // to wave color, then light blue & back to wave\n     yield! (61,102,130)  -- 8--> (249,243,221)\n     yield! (249,243,221) --32--> (138,173,179)\n     yield! (138,173,179) --32--> (61,102,130) |]\n\n(**\nDrawing the fractal\n-------------------\nThe last step is to render the fractal. To do that, we first define a couple of constants\nand helpers. The following constants define what part of the fractal we're rendering and\nhow big is the canvas:\n*)\n\n// Specifies what range of the set to draw\nlet w = -0.4, 0.4\nlet h = -0.95, -0.35\n\n// Create bitmap that matches the size of the canvas\nlet width = 400.0\nlet height = 300.0\n(**\nNext, we define `setPixel` that sets the RGBA colours of a specified pixel in the canvas\nand we'll use F# dynamic operator so that `doc?canvas` returns an HTML element with ID\n`canvas`:\n*)\n/// Set pixel value in ImageData to a given color\nlet setPixel (img:ImageData) x y width (r, g, b) =\n  let index = (x + y * int width) * 4\n  img.data.[index+0] <- r\n  img.data.[index+1] <- g\n  img.data.[index+2] <- b\n  img.data.[index+3] <- 255.0\n\n/// Dynamic operator that returns HTML element by ID\nlet (?) (doc:Document) name :'R =\n  doc.getElementById(name) :?> 'R\n(**\nThe rendering itself is written as an F# asynchronous workflow. The workflow sleeps for\n1ms after rendering each line of the fractal. Behind the scenes, this unblocks the window\nvia a timer, so that the JavaScript function call does not block the browser while running.\n*)\n/// Render fractal asynchronously with sleep after every line\nlet render () = async {\n  // Get <canvas> element & create image for drawing\n  let canv : HTMLCanvasElement = document?canvas\n  let ctx = canv.getContext_2d()\n  let img = ctx.createImageData(U2.Case1 (float width), float height)\n\n  // For each pixel, transform to the specified range\n  // and get color using countInterations and palette\n  for x in 0 .. int width - 1 do\n    for y in 0 .. int height - 1 do\n      let x' = (float x / width * (snd w - fst w)) + fst w\n      let y' = (float y / height * (snd h - fst h)) + fst h\n      let it = countIterations palette.Length x' y'\n      setPixel img x y width palette.[it]\n\n    // Insert non-blocking waiting & update the fractal\n    do! Async.Sleep(1)\n    ctx.putImageData(img, 0.0, 0.0) }\n(**\nNow we just need to register the event handler for the `go` button and start the\nasynchronous workflow to do the rendering. Note that this is done using `Async.StartImmediate`:\n*)\n/// Setup button event handler to start the rendering\n\nlet go : HTMLButtonElement = document?go\ngo.addEventListener_click(fun _ ->\n  render() |> Async.StartImmediate; null)\n"]}