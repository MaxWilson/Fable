{"version":3,"sources":["../samples/browser/samegame/samegame.fsx"],"names":[],"mappings":"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","file":"samegame.js","sourcesContent":["ï»¿(**\n - title: SameGame\n - tagline: The famous tile-matching puzzle\n - intro: This demo shows a Fable implementation of SameGame. The functional implementation of the game follows the *type-first design* approach and consists of three main components: **types**, **game logic** and **front end**.\n   This sample has been contributed by [Leif Battermann](https://twitter.com/leifbattermann).\n   You can find the [full source code on GitHub](https://github.com/fsprojects/Fable/blob/master/samples/browser/samegame/samegame.fsx).\n\n*)\n\n(*** hide ***)\n#r \"node_modules/fable-core/Fable.Core.dll\"\n\nmodule PresetGames =\n  let games = [\n    [5;3;3;4;2;3;4;2;3;3;2;5;3;2;3;4;5;5;5;5;1;1;3;5;4;1;3;1;2;3;1;3;1;3;2;1;2;3;4;3;2;2;1;4;5;5;3;3;3;2;3;3;1;1;5;5;5;4;5;1;1;3;5;5;3;4;4;5;5;2;2;3;1;2;3;4;1;5;1;4;4;5;4;1;1;3;3;1;4;3;2;4;3;3;3;5;3;1;2;1;2;3;3;2;5;1;2;4;3;1;4;1;3;1;3;1;5;5;5;5;2;4;2;3;1;3;5;4;5;4;2;1;4;1;3;1;3;3;1;5;2;4;3;3;4;1;1;2;1;2;5;4;1;2;4;3;2;1;1;2;1;4;5;4;5;4;3;3;4;2;4;3;4;5;4;4;1;4;4;5;3;3;4;4;5;4;5;2;2;5;5;3;2;5;5;3;5;4;4;1;4;4;4;4;4;2;1;1;4;1;3;4;2;1;5;3;5;2;5;2;4;1;2;4;3];\n    [4;1;3;4;4;2;5;3;2;5;2;3;2;3;3;5;4;5;5;1;4;1;1;4;3;5;4;1;2;5;1;5;1;3;4;3;3;3;4;1;3;1;1;1;2;3;4;4;5;1;1;1;4;1;1;3;1;5;1;5;4;4;2;2;5;3;3;5;5;5;3;1;1;4;4;3;5;5;2;1;1;1;1;1;5;5;1;5;2;1;2;3;3;5;3;4;5;5;2;5;5;4;5;1;4;5;5;1;3;4;4;2;4;1;4;4;4;1;2;5;3;4;4;4;3;1;4;2;1;1;3;5;4;2;1;3;1;1;2;5;1;5;2;3;2;1;4;2;1;5;5;4;3;2;3;2;5;1;3;4;1;3;5;3;2;4;4;2;1;1;3;4;4;3;5;3;2;2;3;3;2;2;2;2;1;4;3;2;5;4;4;1;3;4;5;3;1;5;2;3;3;3;2;5;2;2;5;1;2;1;1;4;4;1;2;5;2;4;3;3;2;2;3;2;3];\n    [4;2;3;1;5;4;1;4;4;4;4;2;1;4;5;5;3;4;1;3;5;3;5;4;2;1;4;2;2;5;2;2;4;4;4;4;3;2;5;4;5;5;2;4;2;1;1;2;1;5;4;5;1;1;5;2;2;5;5;4;1;5;3;5;3;3;4;3;5;2;2;1;4;2;3;1;1;2;3;1;1;2;1;2;1;3;1;4;4;3;2;4;3;1;3;1;2;2;1;4;3;4;2;5;3;3;1;4;3;5;1;5;3;4;4;5;4;1;4;5;3;1;4;3;5;4;4;3;5;3;4;5;2;4;4;3;5;1;5;4;3;2;1;5;2;2;1;4;3;4;2;1;3;1;1;3;5;4;1;4;5;3;5;1;1;2;4;5;1;2;5;4;2;1;3;2;5;5;2;4;4;5;1;2;1;3;2;1;3;2;3;2;1;2;4;5;2;1;4;1;3;2;4;2;5;3;5;2;4;5;3;1;3;2;1;1;2;4;5;4;5;4;2;5;4];\n    [2;2;4;1;1;4;3;5;4;2;5;5;1;5;3;3;4;4;2;3;1;1;1;5;2;3;4;4;3;2;3;3;5;1;3;1;2;1;3;2;1;4;4;5;1;4;5;2;3;4;5;3;5;2;3;1;1;5;5;3;1;4;2;3;5;3;5;1;3;2;2;4;1;1;3;2;2;2;5;3;4;2;2;5;2;5;3;4;4;2;1;2;1;1;1;2;3;2;5;4;4;5;4;1;2;2;3;5;4;1;5;4;1;2;5;4;2;3;1;5;5;2;3;2;2;5;3;5;5;1;5;1;2;1;4;4;4;1;3;1;3;4;1;3;3;2;2;5;2;2;5;5;1;1;4;3;3;2;5;2;4;4;5;3;1;4;2;5;3;1;1;2;5;1;3;2;2;5;5;5;4;4;4;4;1;1;5;2;2;2;2;3;1;2;3;4;5;3;2;4;5;2;2;2;2;4;1;1;3;3;2;4;2;1;4;5;5;1;3;1;4;5;3;2;5];\n    [5;3;5;3;4;4;3;3;5;5;3;2;2;5;1;2;3;2;3;2;5;1;4;5;2;1;4;1;2;4;1;2;2;3;1;3;3;4;1;4;4;4;1;1;3;4;2;4;3;1;4;3;5;5;4;4;4;5;1;3;1;2;2;1;4;1;5;5;4;4;4;4;1;4;4;1;5;4;2;3;5;1;4;1;1;3;3;3;4;3;4;3;3;4;3;2;3;1;2;2;5;3;5;4;2;5;2;1;2;4;4;1;4;3;4;1;4;1;5;2;4;3;1;2;5;1;2;3;2;3;4;5;2;1;4;2;1;1;5;2;1;2;1;1;4;3;5;5;5;2;3;3;1;5;4;2;3;4;4;1;4;5;5;5;1;5;5;3;5;3;1;4;2;4;1;2;2;5;4;3;1;2;4;5;5;1;5;2;2;3;4;3;2;4;4;2;3;2;1;5;4;3;1;3;2;5;1;3;4;2;5;4;1;2;1;2;2;5;1;5;1;3;1;3;5];\n    [3;3;3;4;5;5;2;4;4;3;4;2;2;2;1;1;4;4;3;4;2;2;1;1;4;5;3;2;4;2;3;2;4;3;4;3;4;3;1;5;4;4;1;2;1;4;1;3;3;3;4;3;2;3;4;2;2;3;1;5;2;5;5;3;5;3;4;4;4;3;2;1;4;4;5;4;1;5;5;5;4;1;5;2;4;1;1;1;5;3;1;2;2;1;3;5;4;4;2;4;1;2;5;5;2;3;4;3;4;1;1;3;3;2;2;2;5;4;5;5;2;4;5;1;2;1;5;3;1;5;5;3;3;2;4;3;1;1;1;1;2;3;3;5;3;4;5;1;5;2;5;1;5;3;2;2;2;5;3;1;4;2;2;4;1;3;5;1;3;4;1;5;4;4;4;5;2;1;4;4;1;4;3;5;1;4;3;1;5;2;1;2;3;5;2;5;1;4;4;5;5;4;3;1;1;5;3;1;5;3;1;2;1;5;5;5;4;3;3;2;1;5;2;1;4];\n    [4;1;1;4;1;1;2;3;5;5;3;4;2;2;5;1;3;1;1;4;2;4;2;2;3;3;1;4;5;2;3;5;1;1;1;1;2;3;1;4;3;2;2;3;5;4;2;4;1;4;1;5;4;4;2;1;4;5;2;3;5;3;4;4;2;3;4;2;1;5;4;1;1;3;1;5;3;5;3;4;2;3;4;1;1;3;2;3;4;1;2;3;2;4;4;1;4;3;1;2;1;1;4;2;1;1;5;2;3;2;3;4;2;3;1;3;5;4;3;5;2;1;3;1;3;1;5;3;4;1;2;5;5;2;4;2;4;3;5;1;4;5;1;3;3;3;2;4;3;1;2;5;5;1;5;1;3;3;4;5;2;2;3;2;5;3;5;1;5;5;5;2;4;3;1;2;5;1;4;1;5;1;5;4;5;2;1;4;2;4;4;2;5;1;4;2;3;4;3;5;4;1;4;4;2;5;2;2;5;4;1;2;5;4;5;1;3;5;3;4;3;1;5;1;1];\n    [3;4;1;3;1;3;3;1;4;2;3;5;5;4;5;2;2;3;1;1;3;5;2;5;5;4;3;3;4;3;5;4;2;2;5;3;5;3;2;2;4;5;2;4;2;3;3;1;4;3;2;1;4;4;2;3;3;1;4;3;1;5;2;2;3;4;4;4;4;3;2;4;2;5;3;4;3;4;3;2;2;3;5;2;1;4;1;3;1;3;5;5;5;4;2;5;3;5;1;4;5;5;3;2;1;3;5;4;2;4;1;5;3;2;2;4;1;1;1;5;3;1;4;2;3;3;5;3;4;3;1;3;3;5;2;3;1;3;2;4;4;2;2;2;2;5;2;3;3;3;4;3;4;2;1;4;1;1;5;3;4;3;1;4;3;3;2;4;5;5;4;4;5;3;1;2;5;2;5;3;2;2;5;1;5;4;4;2;5;4;2;5;4;4;5;1;1;3;4;5;4;4;3;4;5;1;3;2;1;4;5;5;1;2;2;3;3;1;5;5;4;1;4;2;4];\n    [2;1;1;5;1;5;3;5;1;2;2;3;3;1;2;4;3;5;5;1;1;1;1;2;3;4;3;1;5;5;4;4;2;2;5;2;5;4;5;4;4;5;5;1;3;4;5;3;3;1;5;4;2;3;3;2;1;4;3;2;3;3;5;1;4;3;2;1;1;5;5;4;5;2;3;1;1;5;5;4;5;1;3;4;1;1;2;5;5;4;1;2;2;4;2;1;1;5;2;5;2;4;2;3;2;1;4;1;5;2;1;1;4;4;2;2;5;2;5;4;1;3;1;3;5;3;3;2;1;2;1;2;3;5;2;1;5;5;3;5;3;2;5;4;4;1;3;3;2;5;2;4;5;4;5;5;3;5;4;4;3;2;5;4;1;4;3;5;2;2;3;5;4;5;2;5;4;3;4;5;1;1;5;1;1;2;2;5;1;3;3;5;1;4;3;1;2;1;3;5;3;3;1;1;3;2;1;1;3;5;2;1;1;5;4;3;2;5;3;4;3;4;5;5;4];\n    [5;3;1;1;5;5;1;2;4;2;5;5;5;5;2;2;5;5;1;2;1;1;2;3;4;1;5;3;5;2;1;4;2;1;1;4;4;4;5;3;3;2;3;4;1;1;3;4;5;1;4;1;1;4;4;5;2;3;2;5;5;4;3;2;2;1;3;4;4;4;3;2;1;4;4;5;4;4;2;3;3;2;4;5;4;1;4;3;2;2;2;1;2;1;3;5;5;1;3;1;4;5;5;2;3;3;1;2;1;5;1;4;1;4;2;4;5;3;4;2;3;5;2;3;2;2;5;1;2;4;1;3;1;2;5;4;2;3;2;1;1;2;3;3;1;4;5;3;4;4;5;2;2;2;4;4;3;2;5;1;3;5;1;3;4;4;3;5;5;4;2;3;2;4;2;1;3;4;3;3;2;2;3;3;4;5;2;5;3;2;1;1;3;1;4;1;1;5;5;3;1;1;4;1;2;3;1;4;1;3;1;5;5;3;4;2;2;4;5;5;3;3;2;3;4]\n  ]\n\n(**\nRules\n-----\n\nSameGame is a single player game. It is played on a two-dimensional board filled with stones of different colors.\n\nThe player may remove groups of stones from the board.\n\nA group of stones is defined by two or more orthogonally connected identical-colored stones.\n\nAfter a group is removed, all the stones above will fall down.\n\nIf a column is cleared completely, the columns to the right will slide to the left to close the gap.\n\nThe game ends when the board is either empty or the remaining stones cannot be removed.\n\nScoring\n-------\n\nRemoving a group of *n* stones will result in a score of *(n-2)<sup>2</sup>* points.\n\nIf all stones are removed from the board, the player receives a bonus of 1000 points.\n\nIf the game ends without clearing the board, the player will receive a penalty. The penalty is computed according to *(n-2)<sup>2</sup>* where *n* is the number of stones left on the board.\n*)\n\n\n(**\n\nType-first design\n-----------------\n\nThe module `SameGameTypes` contains the definitions of all the types needed for the game. There is no implementation yet.\n\nIt is the goal to enforce the rules of the game through the types and make invalid state unrepresentable as much as possible.\n*)\n\nmodule SameGameTypes =\n\n    type Position = {\n        Col:int\n        Row:int } with\n\n        member this.Left = { this with Col = this.Col  - 1 }\n        member this.Right = { this with Col = this.Col  + 1 }\n        member this.Up = { this with Row = this.Row  + 1 }\n        member this.Down = { this with Row = this.Row  - 1 }\n\n    type Color = Color of int\n\n    type CellState =\n        | Stone of Color\n        | Empty\n\n    type Column = CellState list\n\n    type Board = Column list\n\n    type Cell = {\n        Position:Position\n        State:CellState }\n\n    type Group = {\n        Color:Color\n        Positions: Position list } \n\n    type Game = \n        | InProgress of GameState\n        | Finished of GameState\n\n    and GameState = {\n        Board:Board\n        Score:int }\n\n    /// This is usually a function that produces (pseudo) random colors.\n    /// It can also be used to create a specific initial board position.\n    type StoneGenerator = unit-> CellState\n\n    type GameConfig = {\n        NumberOfColumns:int\n        NumberOfRows:int\n        StoneGenerator:StoneGenerator }\n\n    type SameGameApi = {\n        NewGame: GameConfig -> Game option\n        Play: Game -> Position -> Game }\n\n(**\n\nImplementation of the game logic\n--------------------------------\n\nThe module `SameGameDomain` contains the actual implementation of the game logic.\n\nIt exposes a public property `api` of type `SameGameApi` that provides an API for player interactions.\n\nNote that the implementation of the game logic doesn't contain any front end code.\n*)\n\nmodule SameGameDomain =\n\n    open System\n    open SameGameTypes\n\n    let private square x = x * x\n\n    let private bonus = 1000\n\n    let private calcScore groupSize =\n        square (groupSize - 2)\n\n    let private penalty stonesLeft =\n        -(square (stonesLeft - 2))\n\n    let private getCellState (board:Board) pos =\n        let colCount = board |> List.length\n        if pos.Col < colCount\n            && pos.Col >= 0\n            && pos.Row < board.[pos.Col].Length\n            && pos.Row >= 0\n        then board.[pos.Col].[pos.Row]\n        else Empty\n\n    let private findAdjacentWithSameColor board col (pos:Position) =\n        [pos.Up; pos.Right; pos.Down; pos.Left]\n        |> List.map (fun p ->  getCellState board p, p)\n        |> List.filter (fun cell -> fst cell = Stone col)\n        |> List.map snd\n\n    let private hasValidMoves board = \n        board\n        |> Seq.mapi (fun i col -> \n            col \n            |> Seq.mapi (fun j cell ->\n                { Position = { Col = i; Row = j }; State = cell}))\n        |> Seq.exists (fun col -> \n            col \n            |> Seq.exists (fun cell -> \n                match cell.State with \n                | Stone c ->\n                    cell.Position\n                    |> findAdjacentWithSameColor board c\n                    |> (not << List.isEmpty) \n                | _ -> false))\n\n    let private numberOfStones board =\n        let numOfStonesInCol =\n            List.sumBy (function Stone c -> 1 | Empty -> 0)\n        board |> List.map numOfStonesInCol |> List.sum\n\n    let private isEmpty (board:Board) =\n        board |> List.forall (List.head >> ((=) Empty))\n\n    let private evaluateGameState gameState =\n        if gameState.Board |> hasValidMoves\n        then InProgress gameState \n        elif gameState.Board |> isEmpty\n        then Finished { gameState with Score = gameState.Score + bonus }\n        else\n            let score =\n                gameState.Score\n                + (gameState.Board |> numberOfStones |> penalty)\n            Finished { gameState with Score = score }\n\n    let private getGroup board position =\n        let rec find (ps:Position list) col (group:Position list) =\n            match ps with\n            | [] -> group\n            | x::xs -> \n                let cells =\n                    x\n                    |> findAdjacentWithSameColor board col\n                    |> List.filter (fun pos ->\n                        not (List.exists ((=) pos) (xs @ group) ))\n                find (cells @ xs) col (x :: group)\n\n        getCellState board position\n        |> function \n            | Stone c -> \n                let positions = find [position] c []\n                if positions |> List.length > 1\n                then Some { Color = c; Positions = positions }\n                else None\n            | _ -> None\n\n    let private removeGroup group board =\n        board\n        |> List.mapi (fun i col -> \n            col \n            |> List.mapi (fun j cell ->\n                { Position = { Col = i; Row = j }; State = cell}) \n            |> List.filter (fun cell ->\n                group.Positions\n                |> (not << List.exists ((=) cell.Position)))\n            |> List.map (fun cell -> cell.State)\n            |> fun col' ->\n                col' @ List.replicate (col.Length - col'.Length) Empty)\n        |> List.filter (List.head >> ((<>) Empty))\n        |> fun cols -> cols @ List.replicate\n                        (board.Length - cols.Length)\n                        (List.replicate (board.[0].Length) Empty)\n\n    let private play gameState pos = \n        getGroup gameState.Board pos\n        |> function \n            | Some g -> \n                let newBoard = gameState.Board |> removeGroup g\n                { Board = newBoard\n                  Score = gameState.Score + calcScore g.Positions.Length }\n            | _ -> gameState\n\n    let private playIfRunning game pos =\n        match game with\n        | InProgress gameState ->\n            play gameState pos |> evaluateGameState\n        | _ -> game\n\n    let private isValid conf =\n        if conf.NumberOfColumns < 3 || conf.NumberOfColumns > 15\n        then false\n        elif conf.NumberOfRows < 3 || conf.NumberOfRows > 15\n        then false\n        else true\n\n    let private newGame config = \n        let createBoard config =\n            List.init config.NumberOfColumns (fun _ ->\n                List.init config.NumberOfRows (fun _ ->\n                    config.StoneGenerator()))\n            |> fun board -> { Board = board; Score = 0 }\n            |> evaluateGameState |> Some\n        if config |> isValid\n        then createBoard config\n        else None\n\n    let api = {\n        NewGame = newGame\n        Play = playIfRunning }\n\n(**\nFront end with Fable\n--------------------\n\nThe UI implementation is based on HTML and style sheets. The SameGame board e.g. is rendered as an HTML table.\n\nThis is the function that renders a board to an HTML string:\n\n*)\n\nopen Fable.Core \nopen Fable.Import.Browser\nopen SameGameTypes\n\nlet api = SameGameDomain.api\n\n// val renderBoardToHtmlString : board:Board -> string\nlet renderBoardToHtmlString (board:Board) =\n    let renderCell x y col =\n        \"<td class='sg-td'>\"\n        + sprintf \"<a href='javaScript:void(0);' id='cell-%d-%d'>\" x y \n        + sprintf \"<div class='sg-cell sg-color%d'>\" col\n        + \"</div></a></td>\"\n\n    let makeBoard (board: int list list) = \n        \"<table class='sg-table horiz-centered'>\"\n        + String.concat \"\" [\n            for y in [board.[0].Length - 1 .. -1 .. 0] do\n                yield \"<tr class='sg-tr'>\"\n                    + ([0..(board.Length - 1)]\n                        |> List.map (fun x -> renderCell x y board.[x].[y])\n                        |> String.concat \"\")\n                    + \"</tr>\"\n            ]\n        + \"</table>\"\n\n    makeBoard (board |> List.map (fun col ->\n        col |> List.map (function Stone (Color c) -> c | Empty -> 0)))\n\n(** \n\nThe function `updateUi` is responsible for displaying the game and integrating the user interactions. These are the steps for updating the UI:\n\n1. The HTML elements for displaying the board and the score are obtained.\n2. A nested function `addListeners` for adding listeners for click events for all table cells is defined. The handlers will play a move and then recursively call `updateUi` again to update the UI with the new game state.\n3. A pattern match of the game state is performed. Depending on the state, the board will be updated, event listeners will be added, and the score will be updated.\n\n*)\n\nlet getById<'T when 'T :> HTMLElement> id =\n    document.getElementById(id) :?> 'T\n\n// val updateUi : game:Game option -> unit\nlet rec updateUi game =\n    let boardElement = getById<HTMLDivElement>(\"sg-board\")\n    let scoreElement = getById<HTMLDivElement> (\"sg-score\")\n\n    let play game (x,y) =\n        game\n        |> Core.Option.map (fun g ->\n            api.Play g { Col = x; Row = y })\n        |> updateUi\n\n    let addListeners maxColIndex maxRowIndex  =\n        [0..maxColIndex] |> List.iter (fun x ->\n            [0..maxRowIndex] |> List.iter (fun y -> \n                let cellId = sprintf \"cell-%d-%d\" x y\n                let el = getById<HTMLButtonElement>(cellId)\n                el.addEventListener_click(fun _ ->\n                    play game (x,y); null)))\n    \n    match game with\n    | Some (InProgress gs) -> \n        let board = renderBoardToHtmlString gs.Board\n        boardElement.innerHTML <- board\n        addListeners (gs.Board.Length - 1) (gs.Board.[0].Length - 1)\n        scoreElement.innerText <- sprintf \"%i point(s).\" gs.Score\n    | Some (Finished gs) -> \n        let board = renderBoardToHtmlString gs.Board\n        boardElement.innerHTML <- board\n        scoreElement.innerText <- \"No more moves. \" +\n            sprintf \"Your final score is %i point(s).\" gs.Score\n    | _ -> boardElement.innerText <-\n            \"Sorry, an error occurred while rendering the board.\"\n\n(**\n\nThe configuration of the board is obtained by parsing the `class` attribute of the `div` element that contains the board. E.g. `<div id=\"sg-board\" class=\"15-15-5\"></div>` will be parsed to a 15 x 15 board with 5 different colors.\n\n*)\n\nlet rndColorGtor i = \n    let rnd = new System.Random()\n    fun () -> rnd.Next(i) + 1 |> Color |> Stone \n\nlet defaultConfig =  \n    (getById<HTMLDivElement>(\"sg-board\")).className\n    |> fun className -> className.Split('-') \n    |> Array.map int\n    |> fun arr ->\n        { NumberOfColumns = arr.[0]\n          NumberOfRows = arr.[1]\n          StoneGenerator = rndColorGtor arr.[2] }\n\n(**\n\nThe handlers for starting a new game and for selecting a game from a list of preset initial game positions are defined and added.\n\n*)\n\nlet buttonNewGame = getById<HTMLButtonElement>(\"new-game\") \nlet selectGame = getById<HTMLSelectElement>(\"sg-select-game\") \nlet selectWidth = getById<HTMLSelectElement>(\"sg-select-w\") \nlet selectHeight = getById<HTMLSelectElement>(\"sg-select-h\") \nlet selectColors = getById<HTMLSelectElement>(\"sg-select-col\") \n\nlet config() =\n    { NumberOfColumns = int selectWidth.value\n      NumberOfRows = int selectHeight.value\n      StoneGenerator = int selectColors.value |> rndColorGtor }\n\nlet newGameOnClick() =\n    let game = config() |> api.NewGame\n    selectGame.selectedIndex <- 0.0 \n    updateUi game\n    \nlet selectGameOnChange () =\n    let presetGtor gameNum =\n        let mutable index = 0;\n        let game = PresetGames.games.[gameNum]\n        fun () ->\n            index <- index + 1\n            game.[index-1] |> Color |> Stone\n\n    let gameIndex = int selectGame.value\n    if gameIndex >= 0 then\n        { config() with StoneGenerator = presetGtor gameIndex }\n        |> api.NewGame\n        |> updateUi\n\nselectGame.addEventListener_change(fun _ -> selectGameOnChange(); null)\nbuttonNewGame.addEventListener_click(fun _ -> newGameOnClick(); null)\n\n(**\n\nFinally the game is initialized with:\n\n*)\n\napi.NewGame defaultConfig |> updateUi \n"]}