{"version":3,"sources":["../samples/browser/d3map/d3map.fsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsEI;AAAA;AAAO;AACP;AACJ;AACA;AACI;;AAMA,wCACF,iCACc,SADd,EAC0B,UAD1B,SAES,cAFT,8BADE;;AAOA,4BACF,iDADE;;AAKA,8BAAQ,gCAAR;;AAgCA,wCAYE;AAAQ;AAAA;AAAA;;AAEM;;AAKhB,0EAnFwC;AAAA,aAqFX;AAAA;AAAA;AAAA;AAAA,OArFW;AAAA,KAmFxC;;AAcG,uDACG;AAAA,uCAAS,iBAAT,EAAyB,iBAAzB;AAAA,KADH,EAPH,0DAEG,iBACU;AAAA,mCACP;AAAA,eAAI,eAAD,KAAiB,eAApB,GACK;AAAA;AAAA;AAAsB,SAAtB,EADL;AAAA,OADO;AAAA,KADV,CAKA;;AAWH;AAAA;AAAA;AAAA;AAAA,sBAAa;AAAA;AAA+B,aAA5C,MACK;AAAA;AAAiC;;AACtC;AACA;AAHA;;AAKA,sBAAa;AAAA;AAAU,aAAvB,MAA6B;AAAA;AAAY;AAAA,WALzC;AAAA;AAAA;AAAA;;AASE;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAMM,OANN;AAAA;;AAiBF;AAAA,gEAEqB;AAEc;AAC/B;AAHkB,OAFtB,kBAMuB;AAGN;;AAAT;AAAA;AACI,qCAAuB,mBAAvB,GAA6C,GAA7C,EAAkD,GAAlD;AAjJsB;AAAA,iBAkJjB;AAAA,wCAAsB,IAAtB;AAAA,WAlJiB;AAAA;AA6IV,OANxB,2BAamB;AAAA,0BAEH,CAAC,KAAD,oBAFG;AAAA,OAbnB;AAAA;;AAiBF;AA3ES,GAZP;;AAiGJ,+BAjK4C;AAAA,WAkKX;AAAA;AAAA;AAAA;AAAA,KAlKW;AAAA,GAiK5C,oFAhKkD;AAAA,WAoK9C;AAAA;AAAA;AAAA,qBAAgC;AAAA;AAAK;;AACrC;AAAsB,SADtB;AAAA;AAAA,KApK8C;AAAA,GAgKlD","file":"d3map.js","sourcesContent":["(**\n - title: D3 world tour\n - tagline: Looping through countries of the world\n - app-style: height:500px; width:500px; margin:10px auto 10px auto;\n - require-paths: `'d3':'https://d3js.org/d3.v3.min','queue': 'https://d3js.org/queue.v1.min','topojson': 'https://d3js.org/topojson.v1.min' `\n - intro: This demo is a Fable port of [Mike Bostock's World Tour](http://bl.ocks.org/mbostock/4183330)\n   D3 demo. It uses the D3 library to create a visualization that loops through all countries of\n   the world and shows them on the globe one by one.\n   You can find the [full source code on GitHub](https://github.com/fsprojects/Fable/blob/master/samples/browser/d3map/d3map.fsx).\n\n   On the technical side, the demo shows some of the more interesting aspects of\n   calling JavaScript libraries from Fable. You'll learn how to define mappings for\n   imported scripts, how to pass lambdas to JS code and the `?` operator.\n*)\n(*** hide ***)\n#r \"node_modules/fable-core/Fable.Core.dll\"\n#load \"node_modules/fable-import-d3/Fable.Import.D3.fs\"\n(**\nJavaScript helpers and imports\n------------------------------\n\nFable comes with [an F# mapping for the D3 library](https://github.com/fsprojects/Fable/tree/master/import/d3),\nwhich defines all the types and functions for D3 that we'll need in this example. In addition to\nD3, this demo uses [d3-queue](https://github.com/d3/d3-queue) and [topojson](https://github.com/mbostock/topojson).\nWe'll write the mappings for those two inline:\n*)\nopen System\nopen Fable.Core\nopen Fable.Import\nopen Fable.Import.Browser\n\n/// Represents the operations of the 'queue' object\ntype IQueue =\n    abstract member defer: obj * obj -> IQueue\n    abstract member await: obj -> unit\n\n/// Represents the API exposed by Topo JSON\ntype ITopojson =\n    abstract member feature: obj * obj -> obj\n    abstract member mesh: obj * obj * obj -> obj\n\nlet [<Import(\"default\",\"queue\")>] queue: unit->IQueue = failwith \"JS only\"\nlet [<Import(\"default\",\"topojson\")>] topojson: ITopojson = failwith \"JS only\"\n(**\n\nThe `Import` attribute on the two values is used to import the code and make it available.\nWe write the arguments as if we were writing [EcmaScript 2015 modules](https://developer.mozilla.org/en/docs/web/javascript/reference/statements/import)\nlike `import defaultMember from 'queue'`, then Fable/Babel will transform the modules as needed.\nIn this case, we use amd as a target so we can load them with [Require.js](http://requirejs.org/docs/whyamd.html).\n\nIn addition to the library imports, we also define the following helpers that wrap an F#\nfunction into the `Func<...>` type. This creates a function value that is compatible with\nJavaScript. This is needed because F# uses curried representation of functions and so,\nfor example, `fun a b -> a + b` would correspond to `function(a){ return function(b) { return a + b; }}`\nin JavaScript. The `Func<...>` delegate avoids the issue.\n\n> Note that if you pass an F# function to a method accepting a `Func<...>` delegate\nin its signature (like `D3.Transition.each` below) this conversion is done automatically.\n*)\nlet inline f1 (f: 'a->'b) = Func<_,_> f\nlet inline f2 (f: 'a->'b->'c) = Func<_,_,_> f\nlet inline f3 (f: 'a->'b->'c->'d) = Func<_,_,_,_> f\n\n(**\nSetting up the canvas and projection\n------------------------------------\n\nWe will be using D3 together with HTML5 canvas, so the first step is to get the context object\nand set the size of the canvas to 500x500:\n*)\nlet width, height = 500., 500.\nlet canvas =  document.getElementsByTagName_canvas().[0]\ncanvas.width <- width\ncanvas.height <- height\nlet ctx = canvas.getContext_2d()\n(**\nNext, we setup the D3 orthographic projection for the globe. The `projection` object will be\nused later for rotating the globe. The `path` value is used for transforming paths that we\nwant to render to match with the projection.\n*)\nlet projection =\n  D3.Geo.Globals.orthographic()\n    .translate((width / 2., height / 2.))\n    .scale(width / 2. - 20.)\n    .clipAngle(90.)\n    .precision(0.6)\n\nlet path =\n  D3.Geo.Globals.path()\n    .projection(unbox<D3.Geo.Transform> projection)\n    .context(ctx)\n\nlet title = D3.Globals.select(\".country-name\")\n(**\nFinally, the `title` value is the HTML element in the middle of the globe that shows the\ncurrent country name. This is just an ordinary HTML element and we will set its body text\nduring the animation.\n\nGenerating the visualization\n----------------------------\n\nThe main part of the code is defined inside a `dataLoaded` function. This gets called\nafter D3 loads the country names and locations. The structure of the code looks as follows:\n\n    let dataLoaded world names =\n      // (more definitions and setup)\n\n      // Generate next transition\n      let rec transition (i) =\n        // (...)\n\n      // Start the first transition\n      transition (0)\n\nThe `dataLoaded` function will be called by D3 with a `world` value loaded from the\n[world-110m.json](https://github.com/fsprojects/Fable/blob/master/samples/browser/d3map/data/world-110m.json)\nfile that represents individual country areas; `names` loads country names from\n[world-country-names.tsv](https://github.com/fsprojects/Fable/blob/master/samples/browser/d3/data/world-country-names.tsv).\n\nAfter some setup, the code defines a recursive `transition` function, which performs one transition\nand then calls itself to setup the next transition step. In each step, it increments the index of\nthe current country, which is stored in `i`. The `transition 0` call then starts the animation.\n*)\n(*** hide ***)\nlet dataLoaded world names =\n(**\n\n### Preparing the data\n\nOnce the data is loaded, we need to do some pre-processing. First, we create a number of\nD3 objects that are used to render the map - this includes `globe` for the border around\nthe globe, `landFeatures` (for filling land) and `borders` for rendering borders between\ncouuntries. We also find all countries for which we have both name and map:\n\n*)\n  // Create globe object (to render the border)\n  let globe = createObj [ \"type\" ==> \"Sphere\" ]\n  // Create land feature (fill the world)\n  let landFeature = topojson.feature(world, world?objects?``land``)\n\n  // Used to render country borders, specify filter to\n  // prune overlapping borders (shared by 2 countries)\n  let borders =\n    topojson.mesh(world,\n                  world?objects?countries,\n                  f2 (fun x y -> x <> y))\n\n  // Get countries for which we have a name and set\n  // their name property using the `?` operator\n  let countries =\n    topojson.feature(world, world?objects?countries)?features\n    |> unbox<obj[]>\n    |> Array.filter (fun d ->\n        names |> Seq.exists (fun n ->\n          if (string d?id) = (string n?id)\n          then d?name <- n?name; true\n          else false))\n    |> Array.sortWith (fun a b ->\n          compare (string a?name) (string b?name))\n(**\n\n### Rendering the map\n\nNow we have all we need to render the map! Given a selected country `country` and a\nrotation `angle`, the following function renders the map:\n*)\n  /// Helper that draws or fills a line\n  let draw color width line fill =\n    if fill then ctx.fillStyle <- U3.Case1 color\n    else ctx.strokeStyle <- U3.Case1 color\n    ctx.lineWidth <- width\n    ctx.beginPath()\n    path.Invoke(line) |> ignore\n    if fill then ctx.fill() else ctx.stroke()\n\n  /// Render background, current country, borders & globe\n  let render country angle =\n      projection.rotate(unbox angle) |> ignore\n      ctx.clearRect(0., 0., width, height)\n      draw \"#ACA2AD\" 0.0 landFeature true\n      draw \"#9E4078\" 0.0 country true\n      draw \"#EAF1F7\" 0.5 borders false\n      draw \"#726B72\" 2.0 globe false\n      box ()\n(**\n\n### Creating the transition\n\nPerhaps the most interesting part of the demo is the next one. Here, we use D3\nto create the animated transition. This is done by calling `d3.transition()` and\nthen setting up a number of parameters:\n\n*)\n  let rec transition i =\n    D3.Globals.transition()\n      .duration(1250.)\n      .each(\"start\", fun _ _ ->\n        // Set the text of the HTML element\n        let name = unbox<D3.Primitive> countries.[i]?name\n        title.text(name) |> box )\n      .tween(\"rotate\", fun _ ->\n        // Interpolate the rotation & return function\n        // that renders everything at a given time 't'\n        let p1, p2 = D3.Geo.Globals.centroid(countries.[i])\n        let r = D3.Globals.interpolate(projection.rotate(), (-p1, -p2))\n        f1 (fun t -> render countries.[i] (r.Invoke(t))) )\n      .transition()\n      .each(\"end\", fun _ _ ->\n        // At the end, start the transition again!\n        transition ((i + 1) % countries.Length) ) |> box\n(*** hide ***)\n  transition(0)\n(**\nLoading the data\n----------------\n\nThe last thing that we need to do in order to put everything together is to trigger the loading\nof data. This is done by calling `queue().defer(...)`, which specifies that a file should be\n(eventually) loaded. When the loading is done, we check for potential errors and call the\n`dataLoaded` function, which then starts the first transition.\n*)\nqueue()\n  .defer(f2 (fun url callback -> D3.Globals.json(url, callback)), \"data/world-110m.json\")\n  .defer(D3.Globals.tsv, \"data/world-country-names.tsv\")\n  .await(f3 (fun error world names ->\n    if error then error |> unbox |> raise\n    dataLoaded world names))\n"]}